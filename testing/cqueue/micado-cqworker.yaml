tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - https://raw.githubusercontent.com/micado-scale/tosca/v0.7.3/micado_types.yaml

repositories:
  docker_hub: https://hub.docker.com/

topology_template:
  node_templates:
    cqueue-worker:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
        env:
          - name: BROKER
            value: amqp://guest:guest@cqueue.server.ip.address:5672
          - name: RESULT_BACKEND
            value: redis://cqueue.server.ip.address:6379
      artifacts:
        image:
          type: tosca.artifacts.Deployment.Image.Container.Docker
          file: sztakilpds/cqueue_worker
          repository: docker_hub
      requirements:
        - volume:
            node: docker-binary-host-vol
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: /usr/bin/docker
        - volume:
            node: docker-socket-host-vol
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: /var/run/docker.sock
      interfaces:
        Kubernetes:
          create:
            implementation: image
          configure:
            inputs:
              restartPolicy: "Always"

    docker-binary-host-vol:
      type: tosca.nodes.MiCADO.Container.Volume
      properties:
        name: docker-bin
      interfaces:
        Kubernetes:
          create:
            inputs:
              hostPath:
                path: /usr/bin/docker

    docker-socket-host-vol:
      type: tosca.nodes.MiCADO.Container.Volume
      properties:
        name: docker-socket
      interfaces:
        Kubernetes:
          create:
            inputs:
              hostPath:
                path: /var/run/docker.sock

    worker-node:
      type: tosca.nodes.MiCADO.CloudSigma.Compute
      properties:
        num_cpus: 2000
        mem_size: 1073741824
        vnc_password: secret
        libdrive_id: ADD_YOUR_LIBRARY_DRIVE_ID_HERE (e.g. 0d2dc532-39f5-4db3-9a15-ff440a7f6ff0)
        public_key_id: ADD_YOUR_PUBLIC_KEY_ID_HERE (e.g. d7c0f1ee-40df-4029-8d95-ec35b34dae1e)
        nics:
        - firewall_policy: ADD_YOUR_FIREWALL_POLICY_ID_HERE (e.g. fd97e326-83c8-44d8-90f7-0a19110f3c9d)
          ip_v4_conf:
            conf: dhcp
      interfaces:
        Occopus:
          create:
            inputs:
              interface_cloud: cloudsigma
              endpoint_cloud: ADD_YOUR_ENDPOINT (e.g. https://zrh.cloudsigma.com/api/2.0)
      capabilities:
        host:
          properties:
            num_cpus: 2
            mem_size: 1 GB

  policies:
    - scalability:
        type: tosca.policies.Scaling.MiCADO
        targets: [ worker-node ]
        properties:
          sources:
          - 'cqueue.server.ip.address:8090'
          constants:
            AET: 30
            DEADLINE: 1530270216
            MAXNODES: 2
            MAXCONTAINERS: 10
          queries:
            REMAININGTIME: '{{DEADLINE}}-time()'
            ITEMS: 'rabbitmq_queue_messages_persistent{queue="machinery_tasks"}'
          min_instances: 1
          max_instances: '{{MAXNODES}}'
          scaling_rule: |
            reqnodes=0
            if ITEMS>0:
              reqconts = ceil(AET/(REMAININGTIME/ITEMS)) if REMAININGTIME>0 else MAXCONTAINERS
              reqnodes = ceil(reqconts/5)
              if reqnodes<m_node_count-1:
                m_node_count-=1
              if reqnodes>m_node_count:
                m_node_count+=1
            else:
              m_node_count = 0
            print "Number of required nodes:",reqnodes
            print "Number of requested nodes:",m_node_count
    - scalability:
        type: tosca.policies.Scaling.MiCADO
        targets: [ cqueue-worker ]
        properties:
          min_instances: 1
          max_instances: '{{MAXCONTAINERS}}'
          scaling_rule: |
            print "Length of queue:",ITEMS
            required_count = 0
            if ITEMS>0:
              required_count = ceil(AET/(REMAININGTIME/ITEMS)) if REMAININGTIME>0 else MAXCONTAINERS
              m_container_count = min([required_count, len(m_nodes) * 5])
            else:
              m_container_count = 0
            print "Number of required containers:",required_count
            print "Number of requested containers:",m_container_count