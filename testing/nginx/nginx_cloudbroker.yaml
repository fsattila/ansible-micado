tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - https://raw.githubusercontent.com/micado-scale/tosca/v0.7.3/micado_types.yaml

repositories:
  docker_hub: https://hub.docker.com/

topology_template:
  node_templates:
    nginxapp:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
         resources:
           requests:
             cpu: "200m"
         ports:
           - target: 8080
             nodePort: 30012
             type: NodePort
           - containerPort: 9300
      artifacts:
       image:
         type: tosca.artifacts.Deployment.Image.Container.Docker
         file: jaydes/nginxapp:1.2
         repository: docker_hub
      interfaces:
        Kubernetes:
          create:
            implementation: image

    worker-node:
      type: tosca.nodes.MiCADO.CloudBroker.Compute
      properties:
        deployment_id: ADD_YOUR_ID_HERE (e.g. e7491688-599d-4344-95ef-aff79a60890e)
        instance_type_id: ADD_YOUR_ID_HERE (e.g. 9b2028be-9287-4bf6-bbfe-bcbc92f065c0)
        key_pair_id: ADD_YOUR_ID_HERE (e.g. d865f75f-d32b-4444-9fbb-3332bcedeb75)
        opened_port: ADD_YOUR_PORTS_HERE (e.g. '22,2377,7946,8300,8301,8302,8500,8600,9100,9200,4789')
      interfaces:
        Occopus:
          create:
            inputs:
              interface_cloud: cloudbroker
              endpoint_cloud: ADD_YOUR_ENDPOINT (e.g https://cola-prototype.cloudbroker.com )
      capabilities:
        host:
          properties:
            num_cpus: 2
            mem_size: 2 GB

  outputs:
    ports:
      value: { get_attribute: [ nginxapp, port ]}

  policies:
    - scalability:
        type: tosca.policies.Scaling.MiCADO
        targets: [ worker-node ]
        properties:
          sources:
            - "nginxapp:9300"
          constants:
            MAXNODES: 2
            MAXCONTAINERS: 8
            CONTSPERNODE: 4
            maxRPCth: 4
            minRPCth: 1
            minNodeScaleInterval: 90
            minContScaleInterval: 60
          queries:
            REQUESTSPERCONT: 'avg(rate(nginx_connections_accepted[60s]))'
            TIME: 'time()'
          min_instances: 1
          max_instances: '{{MAXNODES}}'
          scaling_rule: |
            if m_userdata is None:
              m_userdata = {'container_count': 1, 'time': TIME }
            if len(m_nodes)==m_node_count and m_time_since_node_count_changed>minNodeScaleInterval and TIME-m_userdata['time']>minContScaleInterval:
              if REQUESTSPERCONT>maxRPCth:
                if m_userdata['container_count']==m_node_count*CONTSPERNODE:
                  m_node_count+=1
              elif REQUESTSPERCONT<minRPCth:
                if m_userdata['container_count']==(m_node_count-1)*CONTSPERNODE:
                  m_node_count-=1

    - scalability:
        type: tosca.policies.Scaling.MiCADO
        targets: [ nginxapp ]
        properties:
          min_instances: 1
          max_instances: '{{MAXCONTAINERS}}'
          scaling_rule: |
            if m_userdata is None:
              m_userdata = {'container_count': 1, 'time': TIME }
            if len(m_nodes)==m_node_count and TIME-m_userdata['time']>minContScaleInterval:
              if REQUESTSPERCONT>maxRPCth:
                if m_container_count<m_node_count*CONTSPERNODE:
                  m_container_count+=1
                  m_userdata['container_count'] = m_container_count
                  m_userdata['time'] = TIME
              elif REQUESTSPERCONT<minRPCth and m_container_count>1:
                  m_container_count-=1
                  m_userdata['container_count'] = m_container_count
                  m_userdata['time'] = TIME
