tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - https://raw.githubusercontent.com/micado-scale/tosca/v0.x.2/micado_types.yaml

repositories:
  docker_hub: https://hub.docker.com/

topology_template:
  node_templates:
    nginxapp:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
         resources:
           requests:
             cpu: "200m"
         ports:
           - target: 8080
             type: NodePort
           - target: 9300
      artifacts:
       image:
         type: tosca.artifacts.Deployment.Image.Container.Docker
         file: jaydes/nginxapp:1.2
         repository: docker_hub
      interfaces:
        Kubernetes:
          create:
            implementation: image

    worker_node:
      type: tosca.nodes.MiCADO.CloudSigma.Compute
      properties:
        num_cpus: 2000
        mem_size: 2147483648
        vnc_password: secret
        libdrive_id: ADD_YOUR_LIBRARY_DRIVE_ID_HERE (e.g. 0d2dc532-39f5-4db3-9a15-ff440a7f6ff0)
        public_key_id: ADD_YOUR_PUBLIC_KEY_ID_HERE (e.g. d7c0f1ee-40df-4029-8d95-ec35b34dae1e)
        nics:
        - firewall_policy: ADD_YOUR_FIREWALL_POLICY_ID_HERE (e.g. fd97e326-83c8-44d8-90f7-0a19110f3c9d)
          ip_v4_conf:
            conf: dhcp
      interfaces:
        Occopus:
          create:
            inputs:
              interface_cloud: cloudsigma
              endpoint_cloud: ADD_YOUR_ENDPOINT (e.g. https://zrh.cloudsigma.com/api/2.0)
      capabilities:
        host:
          properties:
            num_cpus: 2
            mem_size: 2 GB

  outputs:
    ports:
      value: { get_attribute: [ nginxapp, port ]}

  policies:
    - scalability:
        type: tosca.policies.Scaling.MiCADO
        targets: [ worker_node ]
        properties:
          sources:
            - "nginxapp"
          constants:
            MAXNODES: 2
            MAXCONTAINERS: 8
          queries:
            REQUESTS: 'sum(nginx_connections_active)'
          min_instances: 1
          max_instances: '{{MAXNODES}}'
          scaling_rule: |
            reqnodes=0
            REQUESTS = ceil(REQUESTS/5)
            if REQUESTS>0:
              reqconts = min(REQUESTS, MAXCONTAINERS)
              reqnodes = reqconts/4
              if reqnodes<m_node_count:
                m_node_count-=1
              if reqnodes>m_node_count:
                m_node_count+=1
            else:
              m_node_count = 0
            print "Number of required nodes:",reqnodes
            print "Number of requested nodes:",m_node_count

    - scalability:
        type: tosca.policies.Scaling.MiCADO
        targets: [ nginxapp ]
        properties:
          min_instances: 1
          max_instances: '{{MAXCONTAINERS}}'
          scaling_rule: |
            print "Number of active connections:",REQUESTS
            required_count = 0
            REQUESTS = ceil(REQUESTS/5)
            if REQUESTS>0:
              required_count = min(REQUESTS, MAXCONTAINERS)
              m_container_count = min(required_count, len(m_nodes) * 4)
            else:
              m_container_count = 0
            print "Number of required containers:",required_count
            print "Number of requested containers:",m_container_count