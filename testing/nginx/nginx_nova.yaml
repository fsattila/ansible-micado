tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - https://raw.githubusercontent.com/micado-scale/tosca/v0.7.3/micado_types.yaml

repositories:
  docker_hub: https://hub.docker.com/

topology_template:
  node_templates:
    nginxapp:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
         resources:
           requests:
             cpu: "200m"
         ports:
           - target: 8080
             nodePort: 30012
             type: NodePort
           - containerPort: 9300
      artifacts:
       image:
         type: tosca.artifacts.Deployment.Image.Container.Docker
         file: jaydes/nginxapp:1.2
         repository: docker_hub
      interfaces:
        Kubernetes:
          create:
            implementation: image

    worker-node:
      type: tosca.nodes.MiCADO.Nova.Compute
      properties:
        image_id: ADD_YOUR_ID_HERE (e.g. d4f4e496-031a-4f49-b034-f8dafe28e01c)
        flavor_name: ADD_YOUR_FLAVOUR_ID_HERE (e.g. 3)
        project_id: ADD_YOUR_ID_HERE (e.g. a678d20e71cb4b9f812a31e5f3eb63b0)
        network_id: ADD_YOUR_ID_HERE (e.g. 3fd4c62d-5fbe-4bd9-9a9f-c161dabeefde)
        key_name: ADD_YOUR_KEY_HERE (e.g. keyname)
        security_groups:
          - ADD_YOUR_ID_HERE (e.g. d509348f-21f1-4723-9475-0cf749e05c33)
      interfaces:
        Occopus:
          create:
            inputs:
              interface_cloud: nova
              endpoint_cloud: ADD_YOUR_ENDPOINT (e.g https://sztaki.cloud.mta.hu:5000/v3)
      capabilities:
        host:
          properties:
            num_cpus: 2
            mem_size: 2 GB

  outputs:
    ports:
      value: { get_attribute: [ nginxapp, port ]}

  policies:
    - scalability:
        type: tosca.policies.Scaling.MiCADO
        targets: [ worker-node ]
        properties:
          sources:
            - "nginxapp:9300"
          constants:
            MAXNODES: 2
            MAXCONTAINERS: 8
            CONTSPERNODE: 4
            maxRPCth: 4
            minRPCth: 1
            minNodeScaleInterval: 90
            minContScaleInterval: 60
          queries:
            REQUESTSPERCONT: 'avg(rate(nginx_connections_accepted[60s]))'
            TIME: 'time()'
          min_instances: 1
          max_instances: '{{MAXNODES}}'
          scaling_rule: |
            if m_userdata is None:
              m_userdata = {'container_count': 1, 'time': TIME }
            if len(m_nodes)==m_node_count and m_time_since_node_count_changed>minNodeScaleInterval and TIME-m_userdata['time']>minContScaleInterval:
              if REQUESTSPERCONT>maxRPCth:
                if m_userdata['container_count']==m_node_count*CONTSPERNODE:
                  m_node_count+=1
              elif REQUESTSPERCONT<minRPCth:
                if m_userdata['container_count']==(m_node_count-1)*CONTSPERNODE:
                  m_node_count-=1

    - scalability:
        type: tosca.policies.Scaling.MiCADO
        targets: [ nginxapp ]
        properties:
          min_instances: 1
          max_instances: '{{MAXCONTAINERS}}'
          scaling_rule: |
            if m_userdata is None:
              m_userdata = {'container_count': 1, 'time': TIME }
            if len(m_nodes)==m_node_count and TIME-m_userdata['time']>minContScaleInterval:
              if REQUESTSPERCONT>maxRPCth:
                if m_container_count<m_node_count*CONTSPERNODE:
                  m_container_count+=1
                  m_userdata['container_count'] = m_container_count
                  m_userdata['time'] = TIME
              elif REQUESTSPERCONT<minRPCth and m_container_count>1:
                  m_container_count-=1
                  m_userdata['container_count'] = m_container_count
                  m_userdata['time'] = TIME
