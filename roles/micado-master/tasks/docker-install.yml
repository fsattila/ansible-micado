---
- name: 'Docker: Installing dependencies'
  apt:
    pkg: "{{ item }}"
    state: present
  with_items:
    - apt-transport-https
    - ca-certificates
    - curl
    - software-properties-common

- name: 'Docker: Adding APT key'
  apt_key:
    url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
    state: present

- name: 'Docker: Adding APT repository'
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
    state: present

- name: 'Docker: Installing APT packages'
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    - python-setuptools
    - "{{ docker_package }}"

- name: 'Docker: Replace ExecStart for systemd'
  lineinfile:
    dest: /lib/systemd/system/docker.service
    regexp: '^ExecStart=/usr/bin/dockerd[.]?'
    line: "ExecStart=/usr/bin/dockerd -H fd:// --mtu={{ ansible_default_ipv4.mtu }}"
  register: docker_service

- name: 'Docker: Restart service'
  systemd:
    daemon_reload: yes
    name: docker
    state: restarted
    enabled: yes
    masked: no
  when: docker_service.changed

- name: 'Docker-compose: Installing python tools'
  action: "{{ ansible_pkg_mgr }} pkg={{ item }} state=present"
  with_items:
    - python-setuptools
    - python3-pip

- name: 'Docker-compose: Installing pip package manager'
  easy_install:
    name: "{{ docker_compose_pip_version }}"

- name: 'Docker-compose: Install'
  pip:
    name: docker-compose
    version: "{{ docker_compose_version if docker_compose_version else omit }}"
    state: present

- name: 'Docker Swarm: check membership'
  shell: docker node ls
  register: swarmmember
  changed_when: swarmmember.rc == 1
  failed_when: swarmmember.rc not in [0,1]

- name: 'Docker Swarm: Initialization'
  shell: docker swarm init
        --listen-addr {{ ansible_default_ipv4.address }}
        --advertise-addr {{ ansible_default_ipv4.address }}
        --availability drain
  when: swarmmember.rc == 1

- name: 'Docker Swarm: Get worker token'
  shell: docker swarm join-token -q worker
  register: worker_token
